/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.LoginFramework;

import Business.Course.CourseDirectory;
import Business.Encryption.HashPassword;
import Business.Faculty.ProfessorDirectory;
import Business.Faculty.StudentGradeRequestDirectory;
import Business.Person.Person;
import Business.Person.PersonDirectory;
import Business.Student.StudentDirectory;
import UserInterface.WorkAreas.FacultyRole.ProfessorJPanel;
import UserInterface.WorkAreas.UniversalCertificationAuthority.CertificationAuthorityJPanel;
import UserInterface.WorkAreas.StudentRole.StudentJPanel;
import UserInterface.WorkAreas.Admin.AdminJPanel;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author dwive
 */
public class LoginJPanel extends javax.swing.JPanel {

    /**
     * Creates new form LoginJPanel
     */
    private JPanel homeJPanel;
    private JPanel LoginJPanel;
    private ProfessorDirectory manageprofessor;
    private CourseDirectory managecourse;
    private StudentDirectory managestudent;
    private PersonDirectory manageperson;
    private StudentGradeRequestDirectory managegrades;
    private HashPassword hash;
    Person person;
    
    public LoginJPanel(JPanel homeJPanel,ProfessorDirectory manageprofessor,CourseDirectory managecourse,StudentDirectory managestudent, StudentGradeRequestDirectory managegrades) {
        initComponents();
        this.homeJPanel = homeJPanel;
        this.manageprofessor = new ProfessorDirectory();
        this.managecourse = new CourseDirectory();
        this.managestudent = new StudentDirectory();
        this.manageperson = new PersonDirectory();
        this.managegrades = new StudentGradeRequestDirectory();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        loginlbl = new javax.swing.JLabel();
        useridlbl = new javax.swing.JLabel();
        passwordlbl = new javax.swing.JLabel();
        passwordpwd = new javax.swing.JPasswordField();
        useridtxt = new javax.swing.JTextField();
        backbtn = new javax.swing.JButton();
        CheckBox = new javax.swing.JCheckBox();
        loginbtn = new javax.swing.JButton();
        useridlbl1 = new javax.swing.JLabel();
        comboSelected = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1200, 700));

        loginlbl.setFont(new java.awt.Font("Cambria Math", 1, 24)); // NOI18N
        loginlbl.setForeground(new java.awt.Color(102, 51, 0));
        loginlbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        loginlbl.setText("LOGIN TO PROCEED");

        useridlbl.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        useridlbl.setForeground(new java.awt.Color(102, 51, 0));
        useridlbl.setText("User ID:");

        passwordlbl.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        passwordlbl.setForeground(new java.awt.Color(102, 51, 0));
        passwordlbl.setText("Password:");

        passwordpwd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordpwdActionPerformed(evt);
            }
        });

        useridtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useridtxtActionPerformed(evt);
            }
        });

        backbtn.setBackground(new java.awt.Color(102, 51, 0));
        backbtn.setFont(new java.awt.Font("Cambria Math", 1, 14)); // NOI18N
        backbtn.setForeground(new java.awt.Color(255, 255, 255));
        backbtn.setText("<< back to Homepage");
        backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backbtnActionPerformed(evt);
            }
        });

        CheckBox.setFont(new java.awt.Font("Cambria Math", 0, 12)); // NOI18N
        CheckBox.setForeground(new java.awt.Color(102, 51, 0));
        CheckBox.setText(" show password ");
        CheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CheckBoxActionPerformed(evt);
            }
        });

        loginbtn.setBackground(new java.awt.Color(102, 51, 0));
        loginbtn.setFont(new java.awt.Font("Cambria Math", 1, 20)); // NOI18N
        loginbtn.setForeground(new java.awt.Color(255, 255, 255));
        loginbtn.setText("LOGIN");
        loginbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginbtnActionPerformed(evt);
            }
        });

        useridlbl1.setFont(new java.awt.Font("Cambria Math", 1, 18)); // NOI18N
        useridlbl1.setForeground(new java.awt.Color(102, 51, 0));
        useridlbl1.setText("Login As:");

        comboSelected.setFont(new java.awt.Font("Cambria Math", 1, 14)); // NOI18N
        comboSelected.setForeground(new java.awt.Color(102, 51, 0));
        comboSelected.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Student", "Professor", "Admin", "Certification" }));
        comboSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboSelectedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(backbtn)
                .addGap(81, 81, 81))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loginlbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(542, 542, 542)
                        .addComponent(loginbtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(433, 433, 433)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(useridlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(passwordlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(useridlbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordpwd, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(useridtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(391, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(backbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(loginlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(useridtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(passwordpwd, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(CheckBox)
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(comboSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(useridlbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(useridlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(passwordlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(60, 60, 60)
                .addComponent(loginbtn)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void useridtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useridtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_useridtxtActionPerformed

    private void backbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backbtnActionPerformed
        // TODO add your handling code here:
        homeJPanel.remove(this);
        CardLayout layout = (CardLayout) homeJPanel.getLayout();
        layout.previous(homeJPanel);
    }//GEN-LAST:event_backbtnActionPerformed

    private void CheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CheckBoxActionPerformed
        // TODO add your handling code here:

        if(CheckBox.isSelected()){
            passwordpwd.setEchoChar((char)0);
        }
        else{
            passwordpwd.setEchoChar('*');
        }
    }//GEN-LAST:event_CheckBoxActionPerformed

    private void loginbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginbtnActionPerformed
        int userId = Integer.parseInt(useridtxt.getText());
        String password = new String(passwordpwd.getPassword());
        // Verification of user   
        if(comboSelected.getSelectedItem().toString().equalsIgnoreCase("Student")){
            Boolean userExist = managestudent.searchStudentIfExist(userId);
            if(userExist){
                Boolean checkPassword = manageperson.checkExistingPass(userId, password);
            if(checkPassword){ // if correct user id and password, go to user panel
                    managestudent.setLoggedStudentID(userId);
                    StudentJPanel panel = new StudentJPanel(homeJPanel, manageprofessor, managecourse, managestudent, manageperson);
                    homeJPanel.add("StudentJPanel" ,panel);
                    CardLayout layout = (CardLayout) homeJPanel.getLayout();
                    layout.next(homeJPanel);
                    useridtxt.setText("");
                    passwordpwd.setText("");
            }
            else{
                JOptionPane.showMessageDialog(null, "Incorrect Password!","warning", JOptionPane.WARNING_MESSAGE);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Student does not exist! Enter valid Student ID");
        }
        }
        
//        Professor option selected
        if(comboSelected.getSelectedItem().toString().equalsIgnoreCase("Professor")){
            Boolean userExist = manageprofessor.searchProfessorIfExist(userId);
            if(userExist){
                Boolean checkPassword = manageperson.checkExistingPass(userId, password);
                if(checkPassword){ // if correct user id and password, go to user panel
                    manageprofessor.setLoggedProfessorID(userId);
                    ProfessorJPanel panel = new ProfessorJPanel(homeJPanel, manageprofessor, managecourse, managestudent, manageperson, managegrades);
                    homeJPanel.add("ProfessorJPanel" ,panel);
                    CardLayout layout = (CardLayout) homeJPanel.getLayout();
                    layout.next(homeJPanel);
                    useridtxt.setText("");
                    passwordpwd.setText("");
                }
                else{
                    JOptionPane.showMessageDialog(null, "Incorrect Password!","warning", JOptionPane.WARNING_MESSAGE);
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Professor does not exist! Enter valid Professor ID");
            }
        }
          if(comboSelected.getSelectedItem().toString().equalsIgnoreCase("Certification")){
            CertificationAuthorityJPanel panel = new CertificationAuthorityJPanel(homeJPanel);
                    homeJPanel.add("CertificationAuthorityJPanel" ,panel);
                    CardLayout layout = (CardLayout) homeJPanel.getLayout();
                    layout.next(homeJPanel);
        }
          if(comboSelected.getSelectedItem().toString().equalsIgnoreCase("Admin")){
            AdminJPanel panel = new AdminJPanel(homeJPanel,manageprofessor, managecourse, managestudent, manageperson);
                    homeJPanel.add("AdminJPanel" ,panel);
                    CardLayout layout = (CardLayout) homeJPanel.getLayout();
                    layout.next(homeJPanel);
        }
        
    }//GEN-LAST:event_loginbtnActionPerformed

    private void comboSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboSelectedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboSelectedActionPerformed

    private void passwordpwdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordpwdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordpwdActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox CheckBox;
    private javax.swing.JButton backbtn;
    private javax.swing.JComboBox<String> comboSelected;
    private javax.swing.JButton loginbtn;
    private javax.swing.JLabel loginlbl;
    private javax.swing.JLabel passwordlbl;
    private javax.swing.JPasswordField passwordpwd;
    private javax.swing.JLabel useridlbl;
    private javax.swing.JLabel useridlbl1;
    private javax.swing.JTextField useridtxt;
    // End of variables declaration//GEN-END:variables
}
